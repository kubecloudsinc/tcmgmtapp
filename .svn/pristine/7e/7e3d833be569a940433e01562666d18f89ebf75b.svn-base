package com.cisco.cstg.autotools.tests;

import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.firefox.internal.ProfilesIni;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.cisco.cstg.autotools.semantic.test.ApplicationConstants;
import com.cisco.cstg.autotools.support.configuration.ComponentConfiguration;
import com.cisco.cstg.autotools.support.configuration.Configuration;
import com.cisco.cstg.autotools.tests.pages.BasePage;
import com.cisco.cstg.autotools.tests.pages.InventorySummaryPage;
import com.cisco.cstg.autotools.tests.pages.LandingPage;
import com.cisco.cstg.autotools.tests.pages.LoginPage;

/**
 * 
 * @author sichituk
 *
 */
public class InventorySummaryTest extends BaseTest {
	
	protected static final Logger logger = LoggerFactory.getLogger(InventorySummaryTest.class);
	private static final Configuration INVENTORY_SUMMARY_TEST_CONFIG = new ComponentConfiguration(InventorySummaryTest.class);
	private static Configuration INVENTORY_SUMMARY_TEST_ACTUAL_VALUES;
	
	@Before
	public void  setUp() throws Exception {
//		driver = openFireFoxProfileDriverWithoutAuth(BasePage.SNTC_FIREFOX_PROFILE_NAME);
//		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		}

	@After
	public void tearDown() throws Exception {
//		driver.quit();
//		String verificationErrorString = verificationErrors.toString();
//		if (!"".equals(verificationErrorString)) {
//			fail(verificationErrorString);
//		}
	}	
	
	@BeforeClass
	public static void extractData(){
		
//		Configuration paramConfig = new ComponentConfiguration(InventorySummaryTest.class);
//		String [] allsource =paramConfig.getStringValue(INVENTORY_ALLSOURCE_DATA).split(";");
		WebDriver staticDriver;
				
		try
		{
			FirefoxProfile profile = null;
			profile = new ProfilesIni().getProfile(BasePage.SNTC_FIREFOX_PROFILE_NAME);
			staticDriver = new FirefoxDriver(profile);
			staticDriver.manage().timeouts().implicitlyWait(TestConstants.WEBDRIVER_IMPLICIT_TIMEOUT_VALUE, TimeUnit.SECONDS);
			
			logger.debug("INSIDE ClickInventory Summary");
			//Login to portal
			//start the test
			staticDriver = new LoginPage(staticDriver).loginToPortal(BasePage.baseUrlNextGen, BasePage.username, BasePage.pwd);
			staticDriver.manage().timeouts().setScriptTimeout(100, TimeUnit.SECONDS);
			staticDriver.manage().window().maximize();
			
			logger.debug("INSIDE ClickInventory Summary METHOD: loginToPortal Complete");
			
			logger.debug("INSIDE clickInventorySummary");
		
			LandingPage landingPage;
			landingPage = new LandingPage(staticDriver);
			
			landingPage.waitForLNPLoad();
			
			landingPage.chooseCustomer(INVENTORY_SUMMARY_TEST_CONFIG.getStringValue(CUSTOMER_NAMES));
			landingPage.chooseInventory(INVENTORY_SUMMARY_TEST_CONFIG.getStringValue(INVENTORY_NAMES));
			
			InventorySummaryPage invSummaryPage;
			invSummaryPage = new InventorySummaryPage(landingPage.clickOnLNPlink(BasePage.INVENTORY_SUMMARY));
			
			invSummaryPage.waitForContentArea();
			
			ArrayList<String> summaryListData = new ArrayList<String>();
			summaryListData = invSummaryPage.getTableRowData(); // To Retive the Data from Summary Data Grid
			
			int size = summaryListData.size();
			logger.debug(" Total records in trlist "+size);
			staticDriver.quit();

			// get the Directory name of the file.
			File expectedValuesFile = new File(
										ApplicationConstants.getClasspathDirectory().toString(),
										InventorySummaryTestActualValues.class.getName()+".cfg"
									  ).getAbsoluteFile();
			logger.debug("CReated the file object");
			
			FileUtils.writeLines(expectedValuesFile, summaryListData);
			
		}
		catch(Exception exp){
		  logger.debug("EXCEPTION IN click InventorySummary method");
		    final Writer result = new StringWriter();
		    final PrintWriter printWriter = new PrintWriter(result);
		    exp.printStackTrace(printWriter);
		    logger.debug(result.toString());
		}		
	}
	
	@Test
	public void clickInventorySummary() throws Exception{
		
	}
	
	@Test
	public void verifyDevicesInAllSourcesChassis() throws Exception{
		INVENTORY_SUMMARY_TEST_ACTUAL_VALUES = new ComponentConfiguration(InventorySummaryTestActualValues.class);
		logger.debug("Value {} is compared with expected value {}",
				INVENTORY_SUMMARY_TEST_ACTUAL_VALUES.getIntegerValue(InventorySummaryPage.INVENTORY_ALL_SOURCES+InventorySummaryPage.CHASSIS),
				INVENTORY_SUMMARY_TEST_CONFIG.getIntegerValue(InventorySummaryPage.INVENTORY_ALL_SOURCES+InventorySummaryPage.CHASSIS));
	}
	
	@Test
	public void verifyDevicesInAllSourcesModules() throws Exception{
		INVENTORY_SUMMARY_TEST_ACTUAL_VALUES = new ComponentConfiguration(InventorySummaryTestActualValues.class);
		logger.debug("Value {} is compared with expected value {}",
				INVENTORY_SUMMARY_TEST_ACTUAL_VALUES.getIntegerValue(InventorySummaryPage.INVENTORY_ALL_SOURCES+InventorySummaryPage.MODULES),
				INVENTORY_SUMMARY_TEST_CONFIG.getIntegerValue(InventorySummaryPage.INVENTORY_ALL_SOURCES+InventorySummaryPage.MODULES));
	}
	
	@Test
	public void verifyDevicesInAllSourcesPowerSupply() throws Exception{
		INVENTORY_SUMMARY_TEST_ACTUAL_VALUES = new ComponentConfiguration(InventorySummaryTestActualValues.class);
		logger.debug("Value {} is compared with expected value {}",
				INVENTORY_SUMMARY_TEST_ACTUAL_VALUES.getIntegerValue(InventorySummaryPage.INVENTORY_ALL_SOURCES+InventorySummaryPage.POWER_SUPPLY),
				INVENTORY_SUMMARY_TEST_CONFIG.getIntegerValue(InventorySummaryPage.INVENTORY_ALL_SOURCES+InventorySummaryPage.POWER_SUPPLY));
	}
	
	@Test
	public void verifyDevicesInAllSourcesFan() throws Exception{
		INVENTORY_SUMMARY_TEST_ACTUAL_VALUES = new ComponentConfiguration(InventorySummaryTestActualValues.class);
		logger.debug("Value {} is compared with expected value {}",
				INVENTORY_SUMMARY_TEST_ACTUAL_VALUES.getIntegerValue(InventorySummaryPage.INVENTORY_ALL_SOURCES+InventorySummaryPage.FAN),
				INVENTORY_SUMMARY_TEST_CONFIG.getIntegerValue(InventorySummaryPage.INVENTORY_ALL_SOURCES+InventorySummaryPage.FAN));
	}
	
	@Test
	public void verifyDevicesInAllSourcesOthers() throws Exception{
		INVENTORY_SUMMARY_TEST_ACTUAL_VALUES = new ComponentConfiguration(InventorySummaryTestActualValues.class);
		logger.debug("Value {} is compared with expected value {}",
				INVENTORY_SUMMARY_TEST_ACTUAL_VALUES.getIntegerValue(InventorySummaryPage.INVENTORY_ALL_SOURCES+InventorySummaryPage.OTHERS),
				INVENTORY_SUMMARY_TEST_CONFIG.getIntegerValue(InventorySummaryPage.INVENTORY_ALL_SOURCES+InventorySummaryPage.OTHERS));
	}
	
	@Test
	public void verifyDevicesInAllSourcesTotal() throws Exception{
		INVENTORY_SUMMARY_TEST_ACTUAL_VALUES = new ComponentConfiguration(InventorySummaryTestActualValues.class);
		logger.debug("Value {} is compared with expected value {}",
				INVENTORY_SUMMARY_TEST_ACTUAL_VALUES.getIntegerValue(InventorySummaryPage.INVENTORY_ALL_SOURCES+InventorySummaryPage.TOTAL),
				INVENTORY_SUMMARY_TEST_CONFIG.getIntegerValue(InventorySummaryPage.INVENTORY_ALL_SOURCES+InventorySummaryPage.TOTAL));
	}
}